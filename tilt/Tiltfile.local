def add_sandbox (no_of_deku_nodes, need_rebuild):
  # run setup when we build
  local_resource(
    "deku-setup",
    "sleep 5 && nix run .#sandbox setup -- --mode local --nodes %s" % no_of_deku_nodes,
    resource_deps=["flextesa"] + ["rebuild"] if need_rebuild else [],
    labels=["scripts"],
    )
  local_resource(
      "deku-net",
      serve_cmd="nix run .#sandbox start -- --mode local --nodes %s" % no_of_deku_nodes,
      resource_deps=["deku-setup"],
      labels=["scripts"],
      auto_init=True, # trigger once at start
      trigger_mode=TRIGGER_MODE_MANUAL,
  )
  if config.tilt_subcommand == "ci":
    local_resource(
      "deku-health-check",
      "nix run .#sandbox check-liveness",
      resource_deps=["deku-net"],
      labels=["scripts"],
      auto_init=True, # trigger once at start
      trigger_mode=TRIGGER_MODE_MANUAL,
      )
    local_resource(
      "deposit-withdraw-test",
      "nix run .#sandbox deposit-withdraw-test",
      resource_deps=["deku-net", "dummy-ticket-contract"],
      labels=["scripts"],
      auto_init=True, # trigger once at start
      trigger_mode=TRIGGER_MODE_MANUAL,
      allow_parallel=True,
      )
    

def load_deku_services (_):
  print('no-op')

def make_deku_yaml (_):
  print('no-op')
  # We must return a valid (but empty) docker-compose configuration
  return encode_yaml({'version': '3.8', 'services': {}})
