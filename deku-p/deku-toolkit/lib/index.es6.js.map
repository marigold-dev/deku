{"version":3,"file":"index.es6.js","sources":["../src/contracts/consensus.ts","../src/core/level.ts","../src/core/nonce.ts","../src/core/amount.ts","../src/utils/hash.ts","../src/core/operation.ts","../src/core/ticket-id.ts","../src/utils/json.ts","../src/core/block.ts","../src/core/proof.ts","../src/utils/urlJoin.ts","../src/network/index.ts","../src/utils/signers.ts","../src/index.ts"],"sourcesContent":["import { ContractAbstraction, ContractProvider } from \"@taquito/taquito\";\nimport { Level as LevelType } from \"../core/level\";\n\ntype consensus_storage = {\n  root_hash: {\n    current_block_level: {\n      c: Array<number>;\n    };\n    current_validators: Array<string>;\n  };\n  vault: {\n    vault: {\n      id: {\n        c: Array<number>;\n      };\n    };\n  };\n};\n\nexport default class Consensus {\n  private _contract: () => Promise<ContractAbstraction<ContractProvider>>;\n\n  constructor(contract: () => Promise<ContractAbstraction<ContractProvider>>) {\n    this._contract = contract;\n  }\n\n  /**\n   * Retrieve the level of the chain from the consensus contract\n   * @returns the level of the chain\n   */\n  async level(): Promise<LevelType> {\n    const contract = await this._contract();\n    const storage = await contract.storage<consensus_storage>();\n    return storage.root_hash.current_block_level.c[0];\n  }\n\n  /**\n   * Returns the list of tezos address of all validators known by the consensus\n   * @returns a list of tezos address\n   */\n  async validators(): Promise<Array<string>> {\n    const contract = await this._contract();\n    const storage = await contract.storage<consensus_storage>();\n    return storage.root_hash.current_validators;\n  }\n\n  /**\n   * Returns the address of the consensus contract\n   * @returns tezos address as string\n   */\n  async address(): Promise<string> {\n    return (await this._contract()).address;\n  }\n}\n","import JSONValue from \"../utils/json\";\n\nexport type Level = number;\n\nconst toDTO = (level: Level): string => {\n  return level.toString();\n};\n\nconst ofDTO = (json: JSONValue): Level | null => {\n  const string = json.as_string();\n  if (string === null) return null;\n  try {\n    return Number.parseInt(string);\n  } catch {\n    return null;\n  }\n};\n\nexport default {\n  toDTO,\n  ofDTO,\n};\n","import JSONValue from \"../utils/json\";\n\nexport type Nonce = number;\n\n/**\n * Creates a new once\n * @returns random number between 0 and 2**32\n */\nconst rand = (): Nonce => {\n  const maxInt32 = 2147483647;\n  const nonce = Math.floor(Math.random() * maxInt32);\n  return nonce;\n};\n\nconst toDTO = (nonce: Nonce): string => {\n  return nonce.toString();\n};\n\nconst ofDTO = (json: JSONValue): Nonce | null => {\n  const string = json.as_string();\n  if (string === null) return null;\n  try {\n    return Number.parseInt(string);\n  } catch {\n    return null;\n  }\n};\n\nexport default {\n  rand,\n  toDTO,\n  ofDTO,\n};\n","import JSONValue from \"../utils/json\";\n\nexport type Amount = number;\n\nconst toDTO = (amount: Amount): string => {\n  return amount.toString();\n};\n\nconst ofDTO = (json: JSONValue): Amount | null => {\n  const string = json.as_string();\n  if (string === null) return null;\n  try {\n    return Number.parseInt(string);\n  } catch {\n    return null;\n  }\n};\n\nexport default {\n  toDTO,\n  ofDTO,\n};\n","import { OperationHash as OperationHashType } from \"../core/operation-hash\";\nimport * as blake from \"blakejs\";\nimport * as bs58check from \"bs58check\";\nimport { Base58 } from \"@tzstamp/helpers\";\n\nconst PREFIX = {\n  Do: new Uint8Array([86, 124]),\n  Db: new Uint8Array([85, 22]),\n};\n\n/**\n * Hash the string representation of the payload, returns the b58 reprensentation starting with the given prefix\n * @param prefix the prefix of your hash\n * @returns\n */\nconst toB58Hash = (prefix: Uint8Array, bytes: Buffer) => {\n  const blakeHash = blake.blake2b(bytes, undefined, 32);\n  const tmp = new Uint8Array(prefix.length + blakeHash.length);\n  tmp.set(prefix);\n  tmp.set(blakeHash, prefix.length);\n  const b58 = bs58check.encode(Buffer.from(tmp));\n  return b58;\n};\n\n// TODO: Where is it used ?\nexport const fromB58Hash = (x: string): string => {\n  const y = Base58.decode(x);\n  const tmp = new Uint8Array(y.buffer).slice(0, 32 + 2);\n  return \"0x\" + Buffer.from(tmp.slice(2)).toString(\"hex\");\n};\n\n// TODO: Find a way to replace the buffer\nexport const hashOperation = (bytes: Buffer): OperationHashType => {\n  return toB58Hash(PREFIX.Do, bytes);\n};\n","import Amount, { Amount as AmountType } from \"./amount\";\nimport { KeyHash as KeyHashType } from \"./key-hash\";\nimport Level, { Level as LevelType } from \"./level\";\nimport Nonce, { Nonce as NonceType } from \"./nonce\";\nimport { JSONType } from \"../utils/json\";\nimport { OperationHash as OperationHashType } from \"./operation-hash\";\nimport { hashOperation } from \"../utils/hash\";\n\ntype OperationTicketTransfer = {\n  sender: KeyHashType;\n  receiver: KeyHashType;\n  ticketId: { ticketer: string; data: string };\n  amount: AmountType;\n};\n\nconst ticketTransferToDTO = (transfer: OperationTicketTransfer) => {\n  const {\n    sender,\n    receiver,\n    ticketId: { ticketer, data },\n    amount,\n  } = transfer;\n  return [\n    \"Operation_ticket_transfer\",\n    {\n      sender,\n      receiver,\n      ticket_id: [\"Ticket_id\", { ticketer, data }],\n      amount: Amount.toDTO(amount),\n    },\n  ];\n};\n\ntype OperationVmTransaction = {\n  sender: KeyHashType;\n  operation: unknown;\n};\n\nconst vmTransactionToDTO = (vmTransaction: OperationVmTransaction) => {\n  const { sender, operation } = vmTransaction;\n  return [\n    \"Operation_vm_transaction\",\n    {\n      sender,\n      /* eslint-disable  @typescript-eslint/no-explicit-any */\n      operation: operation as any, // The toolkit does not know what is inside the payload, because deku is parametric, so it makes sense to type this as any\n    },\n  ];\n};\n\ntype OperationWithdraw = {\n  sender: KeyHashType;\n  owner: KeyHashType; // \"tezos type\",\n  amount: AmountType;\n  ticketId: { ticketer: string; data: string };\n};\n\nconst withdrawToDTO = (withdraw: OperationWithdraw) => {\n  const {\n    sender,\n    owner,\n    ticketId: { ticketer, data },\n    amount,\n  } = withdraw;\n  return [\n    \"Operation_withdraw\",\n    {\n      sender,\n      owner: [\"Implicit\", owner],\n      ticket_id: [\"Ticket_id\", { ticketer, data }],\n      amount: Amount.toDTO(amount),\n    },\n  ];\n};\n\ntype OperationNoop = {\n  sender: KeyHashType;\n};\n\nconst noopToDTO = (noop: OperationNoop) => {\n  const { sender } = noop;\n  return [\n    \"Operation_noop\",\n    {\n      sender,\n    },\n  ];\n};\n\ntype OperationContent =\n  | OperationTicketTransfer\n  | OperationVmTransaction\n  | OperationWithdraw\n  | OperationNoop;\ntype OperationType = \"TicketTransfer\" | \"VmTransaction\" | \"Withdraw\" | \"Noop\";\n\n// named initial in deku\nexport type Operation = {\n  bytes: Buffer; // Should not be there\n  hash: OperationHashType;\n  nonce: NonceType;\n  level: LevelType;\n  type: OperationType;\n  operation: OperationContent;\n};\n\ntype encodeOperation = (\n  nonce: NonceType,\n  level: LevelType,\n  operation: JSONType\n) => Promise<Buffer>;\n\nconst createTransaction = async (\n  encodeOperation: encodeOperation,\n  level: LevelType,\n  nonce: NonceType,\n  sender: KeyHashType,\n  receiver: KeyHashType,\n  amount: AmountType,\n  ticketer: string,\n  data: string\n): Promise<Operation> => {\n  const operation = {\n    sender,\n    receiver,\n    ticketId: { ticketer, data },\n    amount,\n  };\n  const bytes = await encodeOperation(\n    nonce,\n    level,\n    ticketTransferToDTO(operation)\n  );\n  const hash = hashOperation(bytes);\n  return {\n    bytes,\n    hash,\n    nonce,\n    level,\n    type: \"TicketTransfer\",\n    operation,\n  };\n};\n\nconst createVmOperation = async (\n  encodeOperation: encodeOperation,\n  level: LevelType,\n  nonce: NonceType,\n  sender: KeyHashType,\n  payload: unknown\n): Promise<Operation> => {\n  const operation = {\n    sender,\n    operation: payload,\n  };\n  const bytes = await encodeOperation(\n    nonce,\n    level,\n    vmTransactionToDTO(operation)\n  );\n  const hash = hashOperation(bytes);\n  return {\n    bytes,\n    hash,\n    nonce,\n    level,\n    type: \"VmTransaction\",\n    operation,\n  };\n};\n\nconst createWithdraw = async (\n  encodeOperation: encodeOperation,\n  level: LevelType,\n  nonce: NonceType,\n  sender: KeyHashType,\n  owner: KeyHashType,\n  amount: AmountType,\n  ticketer: string,\n  data: string\n): Promise<Operation> => {\n  const operation = {\n    sender,\n    owner,\n    ticketId: { ticketer, data },\n    amount,\n  };\n  const bytes = await encodeOperation(nonce, level, withdrawToDTO(operation));\n  const hash = hashOperation(bytes);\n  return {\n    bytes,\n    hash,\n    nonce,\n    level,\n    type: \"Withdraw\",\n    operation,\n  };\n};\n\nconst createNoop = async (\n  encodeOperation: encodeOperation,\n  level: LevelType,\n  nonce: NonceType,\n  sender: KeyHashType\n): Promise<Operation> => {\n  const operation = { sender };\n  const bytes = await encodeOperation(nonce, level, noopToDTO(operation));\n  const hash = hashOperation(bytes);\n  return {\n    bytes,\n    hash,\n    nonce,\n    level,\n    type: \"Noop\",\n    operation,\n  };\n};\n\ntype DTO = [\n  \"Initial_operation\",\n  {\n    hash: string;\n    nonce: string;\n    level: string;\n    operation: JSONType;\n  }\n];\n\nconst toDTO = (operation: Operation): DTO => {\n  const { hash, nonce, level, type, operation: content } = operation;\n  switch (type) {\n    case \"TicketTransfer\":\n      return [\n        \"Initial_operation\",\n        {\n          hash: hash,\n          nonce: Nonce.toDTO(nonce),\n          level: Level.toDTO(level),\n          operation: ticketTransferToDTO(content as OperationTicketTransfer),\n        },\n      ];\n    case \"VmTransaction\":\n      return [\n        \"Initial_operation\",\n        {\n          hash: hash,\n          nonce: Nonce.toDTO(nonce),\n          level: Level.toDTO(level),\n          operation: vmTransactionToDTO(content as OperationVmTransaction),\n        },\n      ];\n    case \"Withdraw\":\n      return [\n        \"Initial_operation\",\n        {\n          hash: hash,\n          nonce: Nonce.toDTO(nonce),\n          level: Level.toDTO(level),\n          operation: withdrawToDTO(content as OperationWithdraw),\n        },\n      ];\n    case \"Noop\":\n      return [\n        \"Initial_operation\",\n        {\n          hash: hash,\n          nonce: Nonce.toDTO(nonce),\n          level: Level.toDTO(level),\n          operation: noopToDTO(content as OperationNoop),\n        },\n      ];\n  }\n};\n\nexport default {\n  createTransaction,\n  createVmOperation,\n  createWithdraw,\n  createNoop,\n  toDTO,\n};\n","export type TicketID = {\n  ticketer: string;\n  data: string;\n};\n\nconst createTicketID = (ticketer: string, data: string): TicketID => {\n  return {\n    ticketer,\n    data,\n  };\n};\n\nexport default {\n  createTicketID,\n};\n","// Please, tell me there is a better JSON library that this one\n\nexport type JSONType =\n  | string\n  | number\n  | boolean\n  | { [x: string]: JSONType }\n  | Array<JSONType>\n  | null;\n\nexport default class JSONValue {\n  private _json: JSONType = null;\n\n  static of(json: JSONType): JSONValue {\n    const value = new JSONValue();\n    value._json = json;\n    return value;\n  }\n\n  null(): JSONValue {\n    return JSONValue.of(null);\n  }\n\n  at(field: string): JSONValue {\n    if (this._json === null) return this.null();\n    if (typeof this._json !== \"object\") return this.null();\n    if (Array.isArray(this._json)) return this.null();\n    if (!(field in this._json)) return this.null();\n    const value = this._json[field];\n    return JSONValue.of(value);\n  }\n\n  as_string(): string | null {\n    if (this._json === null) return null;\n    if (typeof this._json !== \"string\") return null;\n    return this._json;\n  }\n\n  as_int(): number | null {\n    if (this._json === null) return null;\n    if (typeof this._json !== \"number\") return null;\n    return this._json;\n  }\n\n  as_array(): Array<JSONValue> | null {\n    if (this._json === null) return null;\n    if (!Array.isArray(this._json)) return null;\n    return this._json.map((json) => JSONValue.of(json));\n  }\n\n  as_string_array(): Array<string> | null {\n    if (this._json === null) return null;\n    if (!Array.isArray(this._json)) return null;\n    const array = this._json.flatMap((elt) => {\n      const element = JSONValue.of(elt).as_string();\n      if (element === null) return [];\n      return [element];\n    });\n    return array.length === this._json.length ? array : null; // If the size of doesn't match it means there wasn't only strings in the array\n  }\n\n  as_json(): JSONType {\n    return this._json;\n  }\n\n  as_bool(): boolean | null {\n    if (this._json === null) return null;\n    if (typeof this._json !== \"boolean\") return null;\n    return this._json;\n  }\n}\n","import Level, { Level as LevelType } from \"./level\";\nimport { Address } from \"./address\";\nimport { Key } from \"./key\";\nimport JSONValue from \"../utils/json\";\n\nexport type Block = {\n  key: Key;\n  signature: string;\n  block: {\n    author: Address;\n    level: LevelType;\n    previous: string;\n    payload: Array<string>; // TODO: should we parse the operation of a block ??\n    tezos_operations: Array<string>;\n  };\n};\n\nconst ofDTO = (dto: JSONValue): Block | null => {\n  const key_str = dto.at(\"key\").as_string();\n  const signature_str = dto.at(\"signature\").as_string();\n  const block = dto.at(\"block\");\n\n  const author_str = block.at(\"author\").as_string();\n  const level = Level.ofDTO(block.at(\"level\"));\n  const previous_str = block.at(\"previous\").as_string();\n  const payload_json = block.at(\"payload\").as_string_array();\n  const tezos_operations = block.at(\"tezos_operations\").as_string_array();\n\n  if (key_str === null) return null;\n  if (signature_str === null) return null;\n  if (author_str === null) return null;\n  if (level === null) return null;\n  if (previous_str === null) return null;\n  if (payload_json === null) return null;\n  if (tezos_operations === null) return null;\n\n  return {\n    key: key_str,\n    signature: signature_str,\n    block: {\n      author: author_str,\n      level,\n      previous: previous_str,\n      payload: payload_json,\n      tezos_operations,\n    },\n  };\n};\n\nexport default {\n  ofDTO,\n};\n","import { Address } from \"./address\";\nimport { fromB58Hash } from \"../utils/hash\";\nimport JSONValue from \"../utils/json\";\n// import { TicketID } from \"./ticket-id\" TBD\n\nexport type Proof = {\n  withdrawal_handles_hash: string; // FIXME? should we define a type for each hash\n  handle: {\n    id: number; // bleh\n    owner: Address;\n    ticket_id: {\n      ticketer: string;\n      data: string;\n    };\n    hash: string;\n    amount: string;\n  };\n  proof: string[];\n};\n\nconst ofDTO = (json: JSONValue): Proof | null => {\n  console.log(json.as_json());\n  const withdrawal_handles_hash = json\n    .at(\"withdrawal_handles_hash\")\n    .as_string();\n  const handle = json.at(\"handle\");\n  const proof = json.at(\"proof\").as_array();\n\n  if (proof === null) return null;\n  const proof2 = proof\n    .flatMap((x: JSONValue) => {\n      const y = x.as_array();\n      if (y === null) {\n        throw \"nope\";\n      }\n\n      return [y];\n    })\n    .flat();\n  console.log(proof2);\n  const proof3 = proof2.flatMap((x: JSONValue) => {\n    const y = x.as_string();\n\n    if (y === null) {\n      console.log(y);\n      throw \"Nope\";\n    }\n    return [fromB58Hash(y)];\n  });\n\n  const id = handle.at(\"id\").as_int();\n  const owner = handle.at(\"owner\").as_array();\n  const ticket_id = handle.at(\"ticket_id\").as_array();\n\n  if (ticket_id === null) return null;\n\n  const ticketer = ticket_id[1].at(\"ticketer\").as_string();\n  const data = ticket_id[1].at(\"data\").as_string();\n  const hash = handle.at(\"hash\").as_string();\n  const amount = handle.at(\"amount\").as_string();\n\n  if (withdrawal_handles_hash === null) return null;\n  console.log(\"a\");\n  if (proof === null) return null;\n  console.log(\"b\");\n  if (id === null) return null;\n  console.log(\"c\");\n  if (owner === null) return null;\n  console.log(\"d\");\n  if (ticketer === null) return null;\n  console.log(\"e\");\n  if (data === null) return null;\n  console.log(\"f\");\n  if (hash === null) return null;\n  console.log(\"g\");\n  if (amount === null) return null;\n  console.log(\"h\");\n\n  const address = owner[1].as_string();\n  if (address === null) return null;\n  console.log(\"i\");\n  return {\n    withdrawal_handles_hash: fromB58Hash(withdrawal_handles_hash),\n    handle: {\n      id,\n      owner: address,\n      ticket_id: {\n        ticketer,\n        data,\n      },\n      hash,\n      amount,\n    },\n    proof: proof3,\n  };\n};\n\nexport default {\n  ofDTO,\n};\n","// https://github.com/jfromaniello/url-join\n\n// MIT License\n\n// Copyright (c) 2015 José F. Romaniello\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction normalize(strArray: string[]) {\n  const resultArray: string[] = [];\n  if (strArray.length === 0) {\n    return \"\";\n  }\n\n  if (typeof strArray[0] !== \"string\") {\n    throw new TypeError(\"Url must be a string. Received \" + strArray[0]);\n  }\n\n  // If the first part is a plain protocol, we combine it with the next part.\n  if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n    strArray[0] = strArray.shift() + strArray[0];\n  }\n\n  // There must be two or three slashes in the file protocol, two slashes in anything else.\n  if (strArray[0].match(/^file:\\/\\/\\//)) {\n    strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, \"$1:///\");\n  } else {\n    strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, \"$1://\");\n  }\n\n  for (let i = 0; i < strArray.length; i++) {\n    let component = strArray[i];\n\n    if (typeof component !== \"string\") {\n      throw new TypeError(\"Url must be a string. Received \" + component);\n    }\n\n    if (component === \"\") {\n      continue;\n    }\n\n    if (i > 0) {\n      // Removing the starting slashes for each component but the first.\n      component = component.replace(/^[/]+/, \"\");\n    }\n    if (i < strArray.length - 1) {\n      // Removing the ending slashes for each component but the last.\n      component = component.replace(/[/]+$/, \"\");\n    } else {\n      // For the last component we will combine multiple slashes to a single one.\n      component = component.replace(/[/]+$/, \"/\");\n    }\n\n    resultArray.push(component);\n  }\n\n  let str = resultArray.join(\"/\");\n  // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n  // remove trailing slash before parameters or hash\n  str = str.replace(/\\/(\\?|&|#[^!])/g, \"$1\");\n\n  // replace ? in parameters with &\n  const parts = str.split(\"?\");\n  str = parts.shift() + (parts.length > 0 ? \"?\" : \"\") + parts.join(\"&\");\n\n  return str;\n}\n\nexport default function urlJoin(...args: string[]): string {\n  const parts = Array.from(Array.isArray(args[0]) ? args[0] : args);\n  return normalize(parts);\n}\n","import JSONValue, { JSONType } from \"../utils/json\";\nimport Level, { Level as LevelType } from \"../core/level\";\nimport Block, { Block as BlockType } from \"../core/block\";\nimport Proof, { Proof as ProofType } from \"../core/proof\";\nimport { TicketID } from \"../core/ticket-id\";\nimport urlJoin from \"../utils/urlJoin\";\n\nconst VERSION = \"/api/v1\";\n\ntype endpoint<T> = {\n  uri: string;\n  expectedStatus: number;\n  parse: (json: JSONValue) => T | null;\n};\n\n/* FIXME: reintroduce discovery when the API supports it */\nexport type endpoints = {\n  GET_CHAIN_INFO: endpoint<{\n    consensus: string;\n    isSync: boolean;\n  }>;\n  GET_CURRENT_LEVEL: endpoint<LevelType>;\n  GET_BLOCK_BY_LEVEL: (level: LevelType) => endpoint<BlockType>;\n  GET_BLOCK_BY_HASH: (hash: string) => endpoint<BlockType>;\n  GET_GENESIS: endpoint<BlockType>;\n  GET_CURRENT_BLOCK: endpoint<BlockType>;\n  GET_BALANCE: (address: string, ticket_id: TicketID) => endpoint<number>;\n  GET_PROOF: (operation_hash: string) => endpoint<ProofType>;\n  OPERATIONS: endpoint<string>;\n  GET_VM_STATE: endpoint<JSONType>;\n  ENCODE_OPERATION: endpoint<Buffer>;\n};\n\nexport const makeEndpoints = (root: string): endpoints => ({\n  GET_CHAIN_INFO: {\n    uri: urlJoin(root, `${VERSION}/chain/info`),\n    expectedStatus: 200,\n    parse: (json: JSONValue) => {\n      const consensus = json.at(\"consensus\").as_string();\n      if (consensus === null) return null;\n      // const discovery = json.at(\"discovery\").as_string();\n      // if (discovery === null) return null;\n      const isSync = json.at(\"is_sync\").as_bool();\n      if (isSync === null) return null;\n\n      return { consensus, isSync };\n    },\n  },\n  GET_CURRENT_LEVEL: {\n    uri: urlJoin(root, `${VERSION}/chain/level`),\n    expectedStatus: 200,\n    parse: (json: JSONValue) => {\n      const level_json = json.at(\"level\");\n      return Level.ofDTO(level_json);\n    },\n  },\n  GET_BLOCK_BY_LEVEL: (level: LevelType) => ({\n    uri: urlJoin(root, `${VERSION}/chain/blocks/${Level.toDTO(level)}`),\n    expectedStatus: 200,\n    parse: Block.ofDTO,\n  }),\n  GET_BLOCK_BY_HASH: (blockHash: string) => ({\n    uri: urlJoin(root, `${VERSION}/chain/blocks/${blockHash}`),\n    expectedStatus: 200,\n    parse: Block.ofDTO,\n  }),\n  GET_GENESIS: {\n    uri: urlJoin(root, `${VERSION}/chain/blocks/genesis`),\n    expectedStatus: 200,\n    parse: Block.ofDTO,\n  },\n  GET_CURRENT_BLOCK: {\n    uri: urlJoin(root, `${VERSION}/chain/blocks/genesis`),\n    expectedStatus: 200,\n    parse: Block.ofDTO,\n  },\n  GET_BALANCE: (address: string, ticket_id: TicketID) => ({\n    uri: urlJoin(\n      root,\n      `${VERSION}/balance/${address}/${ticket_id.ticketer}/${ticket_id.data}`\n    ),\n    expectedStatus: 200,\n    parse: (json: JSONValue) => {\n      return json.at(\"balance\").as_int();\n    },\n  }),\n  GET_PROOF: (operation_hash: string) => ({\n    uri: urlJoin(root, `${VERSION}/proof/${operation_hash}`),\n    expectedStatus: 200,\n    parse: Proof.ofDTO,\n  }),\n  OPERATIONS: {\n    uri: urlJoin(root, `${VERSION}/operations`),\n    expectedStatus: 200,\n    parse: (json: JSONValue) => {\n      const hash = json.at(\"hash\").as_string();\n      return hash;\n    },\n  },\n  GET_VM_STATE: {\n    uri: urlJoin(root, `${VERSION}/state/unix`),\n    expectedStatus: 200,\n    parse: (json: JSONValue) => {\n      const state = json.as_json();\n      return state;\n    },\n  },\n  ENCODE_OPERATION: {\n    uri: urlJoin(root, `${VERSION}/helpers/encode-operation`),\n    expectedStatus: 200,\n    parse: (json: JSONValue) => {\n      const bytes = json.at(\"bytes\").as_string();\n      if (bytes === null) return null;\n      return Buffer.from(bytes, \"hex\");\n    },\n  },\n});\n\nconst parse = async <T>(\n  endpoint: endpoint<T>,\n  status: number,\n  json: JSONType\n): Promise<T> => {\n  if (status !== endpoint.expectedStatus) {\n    return Promise.reject(json);\n  }\n\n  const jsonValue = JSONValue.of(json);\n  const parsedResponse = endpoint.parse(jsonValue);\n  if (parsedResponse === null) {\n    return Promise.reject({ type: \"ERROR\", msg: \"please contact the team\" });\n  }\n  return parsedResponse;\n};\n\nexport const get = async <T>(endpoint: endpoint<T>): Promise<T> => {\n  const uri = endpoint.uri;\n  const response = await fetch(uri);\n\n  const status = response.status;\n  const json: JSONType = await response.json();\n  return parse(endpoint, status, json);\n};\n\nexport const post = async <T>(\n  endpoint: endpoint<T>,\n  content: unknown\n): Promise<T> => {\n  const uri = endpoint.uri;\n  const body = JSON.stringify(content);\n  const response = await fetch(uri, { method: \"POST\", body });\n  const status = response.status;\n  const json: JSONType = await response.json();\n  return parse(endpoint, status, json);\n};\n","import { Key } from \"../core/key\";\nimport { KeyHash } from \"../core/key-hash\";\nimport Operation, { Operation as OperationType } from \"../core/operation\";\nimport { JSONType } from \"../utils/json\";\n\ninterface MemorySigner {\n  sign: (payload: string) => Promise<{ prefixSig: string }>;\n  publicKey: () => Promise<Key>;\n  publicKeyHash: () => Promise<KeyHash>;\n}\n\ninterface BeaconSigner {\n  getActiveAccount: () => Promise<\n    { address: KeyHash; publicKey: Key } | undefined\n  >;\n  requestSignPayload: ({\n    payload,\n  }: {\n    payload: string;\n  }) => Promise<{ signature: string } | undefined | null>;\n}\n\ninterface CustomSigner {\n  sign: (payload: string) => Promise<string>;\n  publicKey: () => Promise<Key>;\n  publicKeyHash: () => Promise<KeyHash>;\n}\n\nexport abstract class DekuSigner {\n  abstract sign(payload: string): Promise<string>;\n  abstract publicKey: () => Promise<Key>;\n  abstract publicKeyHash: () => Promise<KeyHash>;\n\n  async signOperation(operation: OperationType): Promise<JSONType> {\n    const bytes = operation.bytes;\n    const signature = await this.sign(bytes.toString(\"hex\"));\n\n    const key = await this.publicKey();\n    const dto = Operation.toDTO(operation);\n    return {\n      key,\n      signature,\n      initial: dto,\n    };\n  }\n}\n\n/**\n * Converts a memory signer to a deku signer\n * @param signer a memory signer instanciante by \"InMemorySigner\"\n * @returns a deku signer\n */\nexport const fromMemorySigner = (signer: MemorySigner): DekuSigner => {\n  class MemorySigner extends DekuSigner {\n    sign = async (payload: string) => {\n      console.log(\"fromMemorySigner\", payload);\n      const signature = await signer.sign(payload);\n      return signature.prefixSig;\n    };\n    publicKey = () => signer.publicKey();\n    publicKeyHash = () => signer.publicKeyHash();\n  }\n  return new MemorySigner();\n};\n\n/**\n * Converts a beacon signer to a deku signer\n * @param signer a beacon signer instanciante by \"DAppClient\"\n * @returns a deku signer\n */\nexport const fromBeaconSigner = (signer: BeaconSigner): DekuSigner => {\n  class BeaconSigner extends DekuSigner {\n    sign = async (payload: string) => {\n      console.log(\"fromBeaconSigner\", payload);\n      const sig = await signer.requestSignPayload({ payload });\n      if (!sig) {\n        return Promise.reject({\n          type: \"SIGNER_ERROR\",\n          msg: \"cannot sign payload\",\n        });\n      }\n      return sig.signature;\n    };\n    publicKey = async () => {\n      const account = await signer.getActiveAccount();\n      if (!account) {\n        return Promise.reject({\n          type: \"SIGNER_ERROR\",\n          msg: \"Your account is not active\",\n        });\n      }\n      return account.publicKey;\n    };\n    publicKeyHash = async () => {\n      const account = await signer.getActiveAccount();\n      if (!account) {\n        return Promise.reject({\n          type: \"SIGNER_ERROR\",\n          msg: \"Your account is not active\",\n        });\n      }\n      return account.address;\n    };\n  }\n  return new BeaconSigner();\n};\n\nexport const fromCustomSigner = (signer: CustomSigner): DekuSigner => {\n  class CustomSigner extends DekuSigner {\n    sign = async (payload: string) => signer.sign(payload);\n    publicKey = async () => signer.publicKey();\n    publicKeyHash = async () => signer.publicKeyHash();\n  }\n  return new CustomSigner();\n};\n","import { TezosToolkit } from \"@taquito/taquito\";\nimport Consensus from \"./contracts/consensus\";\nimport Discovery from \"./contracts/discovery\";\nimport { Address as AddressType } from \"./core/address\";\nimport { Amount as AmountType } from \"./core/amount\";\nimport { Block as BlockType } from \"./core/block\";\nimport { KeyHash as KeyHashType } from \"./core/key-hash\";\nimport Level, { Level as LevelType } from \"./core/level\";\nimport Nonce, { Nonce as NonceType } from \"./core/nonce\";\nimport { Operation as OperationType } from \"./core/operation\";\nimport Operation from \"./core/operation\";\nimport { OperationHash as OperationHashType } from \"./core/operation-hash\";\nimport TicketID from \"./core/ticket-id\";\nimport { endpoints, get, makeEndpoints, post } from \"./network\";\nimport { JSONType } from \"./utils/json\";\nimport { DekuSigner } from \"./utils/signers\";\nexport type Proof = import(\"./core/proof\").Proof;\n\n/* FIXME: reintroduce discovery when the API supports it */\n\nexport type Setting = {\n  dekuRpc: string;\n  dekuSigner?: DekuSigner;\n};\n\nexport type OptOptions = {\n  nonce?: NonceType;\n  level?: LevelType;\n};\n\ntype OperationInfo = {\n  source: KeyHashType;\n  nonce: NonceType;\n  level: LevelType;\n};\n\nexport class DekuToolkit {\n  private endpoints: endpoints;\n  private _dekuSigner: DekuSigner | undefined;\n\n  private _consensus: Consensus | undefined;\n  private _discovery: Discovery | undefined;\n\n  private _dekuRpc: string;\n\n  constructor(setting: Setting) {\n    this._dekuRpc = setting.dekuRpc;\n    this.endpoints = makeEndpoints(setting.dekuRpc);\n    this._dekuSigner = setting.dekuSigner;\n  }\n\n  /**\n   * Sets the deku signer\n   * @param wallet the wallet you want to use\n   * @returns deku toolkit\n   */\n  setDekuSigner(signer: DekuSigner): DekuToolkit {\n    this._dekuSigner = signer;\n    return this;\n  }\n\n  /**\n   * Utils function that check if the deku signer is setup\n   * @returns void if the signer is set, otherwise the promise is rejected\n   */\n  private assertTzWallet(): DekuSigner {\n    if (!this._dekuSigner) {\n      throw new Error(\"Tezos wallet required, see setTzWallet\");\n    }\n    return this._dekuSigner;\n  }\n\n  /**\n   * Sets ther tezos rpc node\n   * @param rpc the url of the tezos rpc,\n   * @returns\n   */\n  setTezosRpc(rpc: string): DekuToolkit {\n    const tezos = new TezosToolkit(rpc);\n    // get the consensus and discovery address\n    const uri = this.endpoints[\"GET_CHAIN_INFO\"];\n    const consensusContract = () =>\n      get(uri).then(({ consensus }) => tezos.contract.at(consensus));\n    // const discoveryContract = () => get(uri).then(({ discovery }) => tezos.contract.at(discovery));\n    this._consensus = new Consensus(consensusContract);\n    // this._discovery = new Discovery(discoveryContract);\n    return this;\n  }\n\n  get dekuRpc(): string {\n    return this._dekuRpc;\n  }\n\n  /**\n   * Access the consensus contract to interact with it\n   * @return the consensus contract\n   */\n  get consensus(): Consensus | undefined {\n    return this._consensus;\n  }\n\n  /**\n   * Access the discovery contract to interact with it\n   * @return the consensus contract\n   */\n  get discovery(): Discovery | undefined {\n    throw \"Not implemented\";\n    // return this._discovery;\n  }\n\n  /**\n   * Returns the address of the consensus and discovery used by the deku chain\n   * @returns the consensus and discovery addresses\n   */\n  async info(): Promise<{ consensus: string }> {\n    const info = await get(this.endpoints[\"GET_CHAIN_INFO\"]);\n    return info;\n  }\n\n  /**\n   * Returns the current level of the chain\n   * @returns the level of the chain as a promise\n   */\n  async level(): Promise<LevelType> {\n    const level = await get(this.endpoints[\"GET_CURRENT_LEVEL\"]);\n    return level;\n  }\n\n  /**\n   * Returns the block at the given level\n   * @param level the level of the block to return\n   * @returns the block at the given level\n   */\n  async getBlockByLevel(level: LevelType): Promise<BlockType> {\n    const block = await get(this.endpoints[\"GET_BLOCK_BY_LEVEL\"](level));\n    return block;\n  }\n\n  /**\n   * Returns the block at the given hash\n   * @param hash the hash of the block to return\n   * @returns the block from the given hash\n   */\n  async getBlockByHash(hash: string): Promise<BlockType> {\n    const block = await get(this.endpoints[\"GET_BLOCK_BY_HASH\"](hash));\n    return block;\n  }\n\n  /**\n   * Returns the genesis block\n   * @returns the genesis block\n   */\n  async getGenesis(): Promise<BlockType> {\n    const block = await get(this.endpoints[\"GET_GENESIS\"]);\n    return block;\n  }\n\n  /**\n   * Returns the current block of deku\n   * @returns the current block\n   */\n  async getCurrentBlock(): Promise<BlockType> {\n    const block = await get(this.endpoints[\"GET_CURRENT_BLOCK\"]);\n    return block;\n  }\n\n  async getBalance(\n    address: string,\n    { ticketer, data }: { ticketer: string; data: string }\n  ): Promise<number> {\n    const ticket_id = TicketID.createTicketID(\n      ticketer,\n      data.startsWith(\"0x\") ? data : \"0x\" + data\n    );\n    const balance = await get(\n      this.endpoints[\"GET_BALANCE\"](address, ticket_id)\n    );\n    return balance;\n  }\n\n  async getProof(operation_hash: string): Promise<Proof> {\n    const proof = await get(this.endpoints[\"GET_PROOF\"](operation_hash));\n    return proof;\n  }\n\n  /**\n   * Convert an optional operation options to operation info: source, level, nonce\n   * If the level is not provided, the returned level is the current level of the chain\n   * If the nonce is not provided, the returned nonce is a random one\n   * The source is always the source of the signer\n   * @param options\n   * @returns the source, a level and a nonce\n   */\n  private async submitOperation(\n    operation: OperationType\n  ): Promise<OperationHashType> {\n    // Retrieve the deku signer\n    const dekuSigner = this.assertTzWallet();\n\n    // Sign the transaction\n    const signedOperation = await dekuSigner.signOperation(operation);\n\n    // Send the operation\n    const hash = await post(this.endpoints[\"OPERATIONS\"], signedOperation);\n    return hash;\n  }\n\n  async getVmState(): Promise<JSONType> {\n    const state = await get(this.endpoints[\"GET_VM_STATE\"]);\n    return state;\n  }\n\n  /**\n   * Convert an optional operation options to operation info: source, level, nonce\n   * If the level is not provided, the returned level is the current level of the chain\n   * If the nonce is not provided, the returned nonce is a random one\n   * The source is always the source of the signer\n   * @param options\n   * @returns the source, a level and a nonce\n   */\n  private async parseOperationOptions(\n    options?: OptOptions\n  ): Promise<OperationInfo> {\n    const dekuSigner = this.assertTzWallet();\n    const source = await dekuSigner.publicKeyHash();\n    const level =\n      options === undefined || options.level === undefined\n        ? await this.level()\n        : options.level;\n    const nonce =\n      options === undefined || options.nonce === undefined\n        ? Nonce.rand()\n        : options.nonce;\n    return {\n      source,\n      level,\n      nonce,\n    };\n  }\n\n  /** Helper to encode operation to binary, so that core/operations stay pure\n   * TODO: find a way to not use the API\n   */\n  private async encodeOperation(\n    nonce: NonceType,\n    level: NonceType,\n    operation: unknown\n  ): Promise<Buffer> {\n    const body = {\n      nonce: Nonce.toDTO(nonce),\n      level: Level.toDTO(level),\n      operation,\n    };\n    return post(this.endpoints[\"ENCODE_OPERATION\"], body);\n  }\n\n  /**\n   * Transfer some ticket to someone\n   * @param receiver the address of the ticket receiver\n   * @param amount the amount of ticket you want to send\n   * @param options to define a custom level/nonce\n   * @param ticketer KT address, first half of the ticket id\n   * @param data other half of the ticket id\n   * @returns an operation hash of the transfer\n   */\n  async transferTo(\n    receiver: AddressType,\n    amount: AmountType,\n    ticketer: string,\n    data: string,\n    options?: OptOptions\n  ): Promise<OperationHashType> {\n    const { source, level, nonce } = await this.parseOperationOptions(options);\n    // Create the transaction\n    const transaction = await Operation.createTransaction(\n      this.encodeOperation.bind(this),\n      level,\n      nonce,\n      source,\n      receiver,\n      amount,\n      ticketer,\n      data\n    );\n    return this.submitOperation(transaction);\n  }\n\n  /**\n   * Withdraw\n   * @param owner the address of the ticket owner on Tezos (e.g. a KT1)\n   * @param amount the amount of ticket you want to withdraw\n   * @param options to define a custom level/nonce\n   * @param ticketer KT1 address, first half of the ticket id\n   * @param data other half of the ticket id\n   * @returns an operation hash of the withdraw\n   */\n  async withdrawTo(\n    owner: AddressType,\n    amount: AmountType,\n    ticketer: string,\n    data: string,\n    options?: OptOptions\n  ): Promise<OperationHashType> {\n    const { source, level, nonce } = await this.parseOperationOptions(options);\n    // Create the withdraw\n    const withdraw = await Operation.createWithdraw(\n      this.encodeOperation.bind(this),\n      level,\n      nonce,\n      source,\n      owner,\n      amount,\n      ticketer,\n      data\n    );\n    return this.submitOperation(withdraw);\n  }\n\n  /**\n   * Submits an operation to the vm\n   * @param payload the string (TODO: is it better to have a json instead of a string ?)\n   * @param options {level, nonce} optional options\n   * @returns the hash the submitted operation\n   */\n  async submitVmOperation(\n    payload: unknown,\n    options?: OptOptions\n  ): Promise<OperationHashType> {\n    const { source, level, nonce } = await this.parseOperationOptions(options);\n    // Create the vm transaction\n    const vmOperation = await Operation.createVmOperation(\n      this.encodeOperation.bind(this),\n      level,\n      nonce,\n      source,\n      payload\n    );\n    return this.submitOperation(vmOperation);\n  }\n\n  /**\n   * Submits a noop operation to the vm\n   * @param options {level, nonce} optional options\n   * @returns the hash of the submitted operation\n   */\n  async submitNoopOperation(options?: OptOptions): Promise<OperationHashType> {\n    const { source, level, nonce } = await this.parseOperationOptions(options);\n    // Create the noop operation\n    const noopOperation = await Operation.createNoop(\n      this.encodeOperation.bind(this),\n      level,\n      nonce,\n      source\n    );\n    return this.submitOperation(noopOperation);\n  }\n\n  async wait(operationHash: OperationHashType): Promise<LevelType> {\n    console.log(operationHash);\n    throw \"Feature not yet implemented\"; // TODO: implement this feature\n  }\n}\n\nexport {\n  fromBeaconSigner,\n  fromCustomSigner,\n  fromMemorySigner,\n} from \"./utils/signers\";\n"],"names":["toDTO","ofDTO"],"mappings":"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"}