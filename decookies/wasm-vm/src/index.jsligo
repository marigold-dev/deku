#include "constants.jsligo"
#include "utils.jsligo"
const main = 
  ([ope, cookieBakers]: 
    [parameter,
     storage]): return_ => {const player = 
     Tezos.get_source();
   return [list([]),
    match(ope.operationType, {Mint: () => {let operation = 
        Option.unopt_with_error(ope.operation, "Operation is mandatory for minting");
      match(operation, {Cookie: () => {let cookieBaker: cookieBaker = 
          force_access(player as address, cookieBakers);
        let cookies = 
          cookieBaker.cookies + (ope.amount as nat);
        let cookieBakers = 
          Map.update(player as address, Some
            ({...cookieBaker, cookies: cookies, layerOneAddress: Some(ope.layerOneAddress)}), cookieBakers);
        return cookieBakers},
       Cursor: () => {let cookieBaker: cookieBaker = 
          force_access(player as address, cookieBakers);
        if(cookieBaker.cookies >= cookieBaker.cursorCost) {let cursors = 
           cookieBaker.cursors + (1 as nat);
         let cookies = 
           abs(cookieBaker.cookies - cookieBaker.cursorCost);
         let updatedCookieBaker = 
           {...cookieBaker,
            cookies: cookies,
            cursors: cursors};
         let cursorCost = 
           calculateCost(operation, updatedCookieBaker);
         let passiveCPS = calculateCPS(updatedCookieBaker);
         let updatedCookieBaker = 
           {...updatedCookieBaker,
            cursorCost: cursorCost,
            passiveCPS: passiveCPS};
         let cookieBakers = 
           Map.update(player as address, Some
             (updatedCookieBaker), cookieBakers);
         return cookieBakers} else {return cookieBakers}},
       Grandma: () => {let cookieBaker: cookieBaker = 
          force_access(player as address, cookieBakers);
        if(cookieBaker.cookies >= cookieBaker.grandmaCost) {let grandmas = 
           cookieBaker.grandmas + (1 as nat);
         let cookies = 
           abs(cookieBaker.cookies - cookieBaker.grandmaCost);
         let updatedCookieBaker = 
           {...cookieBaker,
            cookies: cookies,
            grandmas: grandmas};
         let grandmaCost = 
           calculateCost(operation, updatedCookieBaker);
         let passiveCPS = calculateCPS(updatedCookieBaker);
         let updatedCookieBaker = 
           {...updatedCookieBaker,
            grandmaCost: grandmaCost,
            passiveCPS: passiveCPS};
         let cookieBakers = 
           Map.update(player as address, Some
             (updatedCookieBaker), cookieBakers);
         return cookieBakers} else {return cookieBakers}},
       Farm: () => {let cookieBaker: cookieBaker = 
          force_access(player as address, cookieBakers);
        if(cookieBaker.cookies >= cookieBaker.farmCost) {let farms = 
           cookieBaker.farms + (1 as nat);
         let cookies = 
           abs(cookieBaker.cookies - cookieBaker.farmCost);
         let updatedCookieBaker = 
           {...cookieBaker, cookies: cookies, farms: farms};
         let farmCost = 
           calculateCost(operation, updatedCookieBaker);
         let passiveCPS = calculateCPS(updatedCookieBaker);
         let updatedCookieBaker = 
           {...updatedCookieBaker,
            farmCost: farmCost,
            passiveCPS: passiveCPS};
         let cookieBakers = 
           Map.update(player as address, Some
             (updatedCookieBaker), cookieBakers);
         return cookieBakers} else {return cookieBakers}},
       Mine: () => {let cookieBaker: cookieBaker = 
          force_access(player as address, cookieBakers);
        if(cookieBaker.cookies >= cookieBaker.mineCost) {let mines = 
           cookieBaker.mines + (1 as nat);
         let cookies = 
           abs(cookieBaker.cookies - cookieBaker.mineCost);
         let updatedCookieBaker = 
           {...cookieBaker, cookies: cookies, mines: mines};
         let mineCost = 
           calculateCost(operation, updatedCookieBaker);
         let passiveCPS = calculateCPS(updatedCookieBaker);
         let updatedCookieBaker = 
           {...updatedCookieBaker,
            mineCost: mineCost,
            passiveCPS: passiveCPS};
         let cookieBakers = 
           Map.update(player as address, Some
             (updatedCookieBaker), cookieBakers);
         return cookieBakers} else {return cookieBakers}},
       Factory: () => {let cookieBaker: cookieBaker = 
          force_access(player as address, cookieBakers);
        if(cookieBaker.cookies >= cookieBaker.factoryCost) {let factories = 
           cookieBaker.factories + (1 as nat);
         let cookies = 
           abs(cookieBaker.cookies - cookieBaker.factoryCost);
         let updatedCookieBaker = 
           {...cookieBaker,
            cookies: cookies,
            factories: factories};
         let factoryCost = 
           calculateCost(operation, updatedCookieBaker);
         let passiveCPS = calculateCPS(updatedCookieBaker);
         let updatedCookieBaker = 
           {...updatedCookieBaker,
            factoryCost: factoryCost,
            passiveCPS: passiveCPS};
         let cookieBakers = 
           Map.update(player as address, Some
             (updatedCookieBaker), cookieBakers);
         return cookieBakers} else {return cookieBakers}},
       Bank: () => {let cookieBaker: cookieBaker = 
          force_access(player as address, cookieBakers);
        if(cookieBaker.cookies >= cookieBaker.bankCost) {let banks = 
           cookieBaker.banks + (1 as nat);
         let cookies = 
           abs(cookieBaker.cookies - cookieBaker.bankCost);
         let updatedCookieBaker = 
           {...cookieBaker, cookies: cookies, banks: banks};
         let bankCost = 
           calculateCost(operation, updatedCookieBaker);
         let passiveCPS = calculateCPS(updatedCookieBaker);
         let updatedCookieBaker = 
           {...updatedCookieBaker,
            bankCost: bankCost,
            passiveCPS: passiveCPS};
         let cookieBakers = 
           Map.update(player as address, Some
             (updatedCookieBaker), cookieBakers);
         return cookieBakers} else {return cookieBakers}},
       Temple: () => {let cookieBaker: cookieBaker = 
          force_access(player as address, cookieBakers);
        if(cookieBaker.cookies >= cookieBaker.templeCost) {let temples = 
           cookieBaker.temples + (1 as nat);
         let cookies = 
           abs(cookieBaker.cookies - cookieBaker.templeCost);
         let updatedCookieBaker = 
           {...cookieBaker,
            cookies: cookies,
            temples: temples};
         let templeCost = 
           calculateCost(operation, updatedCookieBaker);
         let passiveCPS = calculateCPS(updatedCookieBaker);
         let updatedCookieBaker = 
           {...updatedCookieBaker,
            templeCost: templeCost,
            passiveCPS: passiveCPS};
         let cookieBakers = 
           Map.update(player as address, Some
             (updatedCookieBaker), cookieBakers);
         return cookieBakers} else {return cookieBakers}}})},
     Eat: () => {let cookieBaker: cookieBaker = 
        force_access(player as address, cookieBakers);
      if(cookieBaker.cookies >= ope.amount && (ope.amount
            as nat) > (0 as nat)) {let eatenCookies = 
         cookieBaker.eatenCookies + (ope.amount as nat);
       let cookies = 
         abs(cookieBaker.cookies - (ope.amount as nat));
       let cookieBakers = 
         Map.update(player as address, Some
           ({...cookieBaker,
            cookies: cookies,
            eatenCookies: eatenCookies}), cookieBakers);
       return cookieBakers} else {return cookieBakers}},
     Transfer: () => {let sender: cookieBaker = 
        force_access(player as address, cookieBakers);
      if(sender.cookies >= ope.amount && (ope.amount as nat) > (0
              as nat)) {let rawRecipient = 
         Option.unopt_with_error(ope.recipient, "There is not recipient");
       let recipient = 
         force_access(rawRecipient as address, cookieBakers);
       let cookiesToTransfer = ope.amount as nat;
       let senderCookies = 
         sender.cookies - cookiesToTransfer;
       let recipientCookies = 
         recipient.cookies + cookiesToTransfer;
       let cookieBakers = 
         Map.update(player as address, Some
           ({...sender, cookies: abs(senderCookies)}), cookieBakers);
       let cookieBakers = 
         Map.update(rawRecipient as address, Some
           ({...recipient, cookies: recipientCookies}), cookieBakers);
       return cookieBakers} else {return cookieBakers}}})]};
