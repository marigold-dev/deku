#import "math-lib-core/math.mligo" "Math"
#include "types.jsligo"
const newCookieBaker: cookieBaker = 
  {passiveCPS: 0 as nat,
   cookies: 0 as nat,
   cursors: 0 as nat,
   grandmas: 0 as nat,
   farms: 0 as nat,
   mines: 0 as nat,
   factories: 0 as nat,
   banks: 0 as nat,
   temples: 0 as nat,
   cursorCost: initialCursorCost,
   grandmaCost: initialGrandmaCost,
   farmCost: initialFarmCost,
   mineCost: initialMineCost,
   factoryCost: initialFactoryCost,
   bankCost: initialBankCost,
   templeCost: initialTempleCost,
   eatenCookies: 0 as nat,
   authorizedKeys: Set.empty};

const calculateCost = 
  (ope: actions, cookieBaker: cookieBaker): nat => {match(ope, {Cookie: () => {return (0
       as nat)},
    Cursor: () => {let firstOperation = 
       Math.power(115 as nat, cookieBaker.cursors);
     const first: nat = initialCursorCost * firstOperation;
     const second: nat = 
       first / Math.power(100 as nat, cookieBaker.cursors
          as nat);
     return second},
    Grandma: () => {let firstOperation = 
       Math.power(115 as nat, cookieBaker.grandmas);
     const first: nat = initialGrandmaCost * firstOperation;
     const second: nat = 
       first / Math.power(100 as nat, cookieBaker.grandmas
          as nat);
     return second},
    Farm: () => {let firstOperation = 
       Math.power(115 as nat, cookieBaker.farms);
     const first: nat = initialFarmCost * firstOperation;
     const second: nat = 
       first / Math.power(100 as nat, cookieBaker.farms
          as nat);
     return second},
    Mine: () => {let firstOperation = 
       Math.power(115 as nat, cookieBaker.mines);
     const first: nat = initialMineCost * firstOperation;
     const second: nat = 
       first / Math.power(100 as nat, cookieBaker.mines
          as nat);
     return second},
    Factory: () => {let firstOperation = 
       Math.power(115 as nat, cookieBaker.factories);
     const first: nat = initialFactoryCost * firstOperation;
     const second: nat = 
       first / Math.power(100 as nat, cookieBaker.factories
          as nat);
     return second},
    Bank: () => {let firstOperation = 
       Math.power(115 as nat, cookieBaker.banks);
     const first: nat = initialBankCost * firstOperation;
     const second: nat = 
       first / Math.power(100 as nat, cookieBaker.banks
          as nat);
     return second},
    Temple: () => {let firstOperation = 
       Math.power(115 as nat, cookieBaker.temples);
     const first: nat = initialTempleCost * firstOperation;
     const second: nat = 
       first / Math.power(100 as nat, cookieBaker.temples
          as nat);
     return second}})};

const calculateCPS = 
  (cookieBaker: cookieBaker): nat => {let cursor = 
     cookieBaker.cursors * cursorCPS;
   let grandma = cookieBaker.grandmas * grandmaCPS;
   let farm = cookieBaker.farms * farmCPS;
   let mine = cookieBaker.mines * mineCPS;
   let factory = cookieBaker.factories * factoryCPS;
   let bank = cookieBaker.banks * bankCPS;
   let temple = cookieBaker.temples * templeCPS;
   return cursor + grandma + farm + mine + factory + bank + temple};

const force_access = 
  (key: address, cookieBakers: storage) => {return match(Big_map.
   find_opt(key, cookieBakers), {Some: cookieBaker => 
      cookieBaker,
    None: () => newCookieBaker})};
