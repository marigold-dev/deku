
const _test_mint_factory = 
  (): bool => {let _ = 
     Test.log(["START: Executing _test_mint_factory"]);
   let initial_storage: storage = Map.empty;
   let [taddr, _, _] = 
     Test.originate(main, initial_storage, 0 as tez);
   let contr = Test.to_contract(taddr);
   let _ = 
     Test.transfer_to_contract_exn(contr, (Delegate
        ({onBehalfOf: "tz1YCm2e83y4fWJG2Enf1EZVf3mSQykQJYMD"
          as address})), 1 as mutez);
   let _ = 
     Test.transfer_to_contract_exn(contr, (Mint
        ({operation: Cookie(),
         amount: 130000 as nat,
         onBehalfOf: "tz1YCm2e83y4fWJG2Enf1EZVf3mSQykQJYMD"
          as address})), 1 as mutez);
   let _ = 
     Test.transfer_to_contract_exn(contr, (Mint
        ({operation: Factory(),
         amount: 1 as nat,
         onBehalfOf: "tz1YCm2e83y4fWJG2Enf1EZVf3mSQykQJYMD"
          as address})), 1 as mutez);
   let authorizedKeys: set<address> = Set.empty;
   let authorizedKeys: set<address> = 
     Set.add("tz1TDZG4vFoA2xutZMYauUnS4HVucnAGQSpZ"
      as address, authorizedKeys);
   let expectedStorage: storage = 
     Map.update("tz1YCm2e83y4fWJG2Enf1EZVf3mSQykQJYMD"
      as address, Some
       ({bankCost: initialBankCost,
        banks: 0 as nat,
        cookies: 0 as nat,
        cursorCost: initialCursorCost,
        cursors: 0 as nat,
        eatenCookies: 0 as nat,
        factories: 1 as nat,
        factoryCost: 149500 as nat,
        farmCost: initialFarmCost,
        farms: 0 as nat,
        grandmaCost: initialGrandmaCost,
        grandmas: 0 as nat,
        mineCost: initialMineCost,
        mines: 0 as nat,
        passiveCPS: 260 as nat,
        templeCost: initialTempleCost,
        temples: 0 as nat,
        authorizedKeys: authorizedKeys}), initial_storage);
   let actualStorage = Test.get_storage(taddr);
   let _ = Test.log(["actual   storage: ", actualStorage]);
   let _ = Test.log(["expected storage: ", expectedStorage]);
   let _ = Test.log(["END: Executing _test_mint_factory"]);
   return (actualStorage == expectedStorage)};

const _test_cannot_mint_factory = 
  (): bool => {let _ = 
     Test.log(["START: Executing _test_cannot_mint_factory"]);
   let initial_storage: storage = Map.empty;
   let [taddr, _, _] = 
     Test.originate(main, initial_storage, 0 as tez);
   let contr = Test.to_contract(taddr);
   let _ = 
     Test.transfer_to_contract_exn(contr, (Delegate
        ({onBehalfOf: "tz1YCm2e83y4fWJG2Enf1EZVf3mSQykQJYMD"
          as address})), 1 as mutez);
   let _ = 
     Test.transfer_to_contract_exn(contr, (Mint
        ({operation: Cookie(),
         amount: 1 as nat,
         onBehalfOf: "tz1YCm2e83y4fWJG2Enf1EZVf3mSQykQJYMD"
          as address})), 1 as mutez);
   let _ = 
     Test.transfer_to_contract_exn(contr, (Mint
        ({operation: Factory(),
         amount: 1 as nat,
         onBehalfOf: "tz1YCm2e83y4fWJG2Enf1EZVf3mSQykQJYMD"
          as address})), 1 as mutez);
   let authorizedKeys: set<address> = Set.empty;
   let authorizedKeys: set<address> = 
     Set.add("tz1TDZG4vFoA2xutZMYauUnS4HVucnAGQSpZ"
      as address, authorizedKeys);
   let expectedStorage: storage = 
     Map.update("tz1YCm2e83y4fWJG2Enf1EZVf3mSQykQJYMD"
      as address, Some
       ({bankCost: initialBankCost,
        banks: 0 as nat,
        cookies: 1 as nat,
        cursorCost: initialCursorCost,
        cursors: 0 as nat,
        eatenCookies: 0 as nat,
        factories: 0 as nat,
        factoryCost: initialFactoryCost,
        farmCost: initialFarmCost,
        farms: 0 as nat,
        grandmaCost: initialGrandmaCost,
        grandmas: 0 as nat,
        mineCost: initialMineCost,
        mines: 0 as nat,
        passiveCPS: 0 as nat,
        templeCost: initialTempleCost,
        temples: 0 as nat,
        authorizedKeys: authorizedKeys}), initial_storage);
   let actualStorage = Test.get_storage(taddr);
   let _ = Test.log(["actual   storage: ", actualStorage]);
   let _ = Test.log(["expected storage: ", expectedStorage]);
   let _ = 
     Test.log(["END: Executing _test_cannot_mint_factory"]);
   return (actualStorage == expectedStorage)};

const test_mint_factory = _test_mint_factory();

const test_cannot_mint_factory = _test_cannot_mint_factory();
