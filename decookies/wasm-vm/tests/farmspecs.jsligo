
const _test_mint_farm = 
  (): bool => {let _ = 
     Test.log(["START: Executing _test_mint_farm"]);
   let initial_storage: storage = Map.empty;
   let [taddr, _, _] = 
     Test.originate(main, initial_storage, 0 as tez);
   let contr = Test.to_contract(taddr);
   let _ = 
     Test.transfer_to_contract_exn(contr, ({operationType: Mint(),
       operation: Some (Cookie()) as option<actions>,
       amount: 1100 as nat,
       recipient: None() as option<address>}), 1 as mutez);
   let _ = 
     Test.transfer_to_contract_exn(contr, ({operationType: Mint(),
       operation: Some (Farm()) as option<actions>,
       amount: 1 as nat,
       recipient: None() as option<address>}), 1 as mutez);
   let expectedStorage: storage = 
     Map.update("tz1TDZG4vFoA2xutZMYauUnS4HVucnAGQSpZ"
      as address, Some
       ({bankCost: initialBankCost,
        banks: 0 as nat,
        cookies: 0 as nat,
        cursorCost: initialCursorCost,
        cursors: 0 as nat,
        eatenCookies: 0 as nat,
        factories: 0 as nat,
        factoryCost: initialFactoryCost,
        farmCost: 1265 as nat,
        farms: 1 as nat,
        grandmaCost: initialGrandmaCost,
        grandmas: 0 as nat,
        mineCost: initialMineCost,
        mines: 0 as nat,
        passiveCPS: 8 as nat,
        templeCost: initialTempleCost,
        temples: 0 as nat}), initial_storage);
   let actualStorage = Test.get_storage(taddr);
   let _ = Test.log(["actual   storage: ", actualStorage]);
   let _ = Test.log(["expected storage: ", expectedStorage]);
   let _ = Test.log(["END: Executing _test_mint_farm"]);
   return (actualStorage == expectedStorage)};

const _test_cannot_mint_farm = 
  (): bool => {let _ = 
     Test.log(["START: Executing _test_cannot_mint_farm"]);
   let initial_storage: storage = Map.empty;
   let [taddr, _, _] = 
     Test.originate(main, initial_storage, 0 as tez);
   let contr = Test.to_contract(taddr);
   let _ = 
     Test.transfer_to_contract_exn(contr, ({operationType: Mint(),
       operation: Some (Cookie()) as option<actions>,
       amount: 1 as nat,
       recipient: None() as option<address>}), 1 as mutez);
   let _ = 
     Test.transfer_to_contract_exn(contr, ({operationType: Mint(),
       operation: Some (Farm()) as option<actions>,
       amount: 1 as nat,
       recipient: None() as option<address>}), 1 as mutez);
   let expectedStorage: storage = 
     Map.update("tz1TDZG4vFoA2xutZMYauUnS4HVucnAGQSpZ"
      as address, Some
       ({bankCost: initialBankCost,
        banks: 0 as nat,
        cookies: 1 as nat,
        cursorCost: initialCursorCost,
        cursors: 0 as nat,
        eatenCookies: 0 as nat,
        factories: 0 as nat,
        factoryCost: initialFactoryCost,
        farmCost: initialFarmCost,
        farms: 0 as nat,
        grandmaCost: initialGrandmaCost,
        grandmas: 0 as nat,
        mineCost: initialMineCost,
        mines: 0 as nat,
        passiveCPS: 0 as nat,
        templeCost: initialTempleCost,
        temples: 0 as nat}), initial_storage);
   let actualStorage = Test.get_storage(taddr);
   let _ = Test.log(["actual   storage: ", actualStorage]);
   let _ = Test.log(["expected storage: ", expectedStorage]);
   let _ = 
     Test.log(["END: Executing _test_cannot_mint_farm"]);
   return (actualStorage == expectedStorage)};

const test_mint_farm = _test_mint_farm();

const test_cannot_mint_farm = _test_cannot_mint_farm();
