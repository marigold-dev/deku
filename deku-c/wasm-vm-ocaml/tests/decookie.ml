let extract_operation_payload str =
  let res =
    match Data_encoding.Json.from_string str with
    | Ok json ->
        Data_encoding.Json.destruct Ocaml_wasm_vm.Operation_payload.encoding
          json
    | Error _ -> failwith "cannot destruct"
  in
  match res.operation with
  | Call { address = _; argument } ->
      Ocaml_wasm_vm.Operation.Call
        {
          address =
            Deku_ledger.Address.of_contract_address
              ( Deku_ledger.Contract_address.of_user_operation_hash
                  (Deku_crypto.BLAKE2b.hash "tutturu"),
                None );
          argument;
        }
  | _ -> failwith "impossible"

let decookie_invoke_delegate address =
  let str =
    {|  
{ "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Left",
            [ "Union",
              [ "Left",
                [ "String","|}
    ^ address ^ {|" ] ] ] ] ] },
  "tickets": [] }
  |}
  in
  extract_operation_payload str

let decookie_invoke_mint_cookies address cookies =
  let str =
    {|  
{ "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Left",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "|}
    ^ cookies ^ {|"],
                        [ "String", "|} ^ address
    ^ {|" ] ] ],
                    [ "Union",
                      [ "Left",
                        [ "Union",
                          [ "Left", [ "Union", [ "Right", [ "Unit" ] ] ] ] ] ] ] ] ] ] ] ] ] },
  "tickets": [] }
|}
  in
  extract_operation_payload str

let decookie_invoke_mint_cursor address =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Left",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "1" ],
                        [ "String", "|}
    ^ address
    ^ {|" ] ] ],
                    [ "Union",
                      [ "Left",
                        [ "Union",
                          [ "Right", [ "Union", [ "Left", [ "Unit" ] ] ] ] ] ] ] ] ] ] ] ] ] },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_invoke_mint_grandma address =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Left",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "1" ],
                        [ "String", "|}
    ^ address
    ^ {|" ] ] ],
                    [ "Union",
                      [ "Right",
                        [ "Union",
                          [ "Left", [ "Union", [ "Right", [ "Unit" ] ] ] ] ] ] ] ] ] ] ] ] ] },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_invoke_mint_farm address =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Left",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "1" ],
                        [ "String", "|}
    ^ address
    ^ {|" ] ] ],
                    [ "Union",
                      [ "Right",
                        [ "Union",
                          [ "Left", [ "Union", [ "Left", [ "Unit" ] ] ] ] ] ] ] ] ] ] ] ] ] },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_invoke_mint_mine address =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Left",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "1" ],
                        [ "String", "|}
    ^ address
    ^ {|" ] ] ],
                    [ "Union",
                      [ "Right",
                        [ "Union",
                          [ "Right", [ "Union", [ "Left", [ "Unit" ] ] ] ] ] ] ] ] ] ] ] ] ]  },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_invoke_mint_factory address =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Left",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "1" ],
                        [ "String", "|}
    ^ address
    ^ {|" ] ] ],
                    [ "Union",
                      [ "Left",
                        [ "Union",
                          [ "Right", [ "Union", [ "Right", [ "Unit" ] ] ] ] ] ] ] ] ] ] ] ] ]  },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_invoke_mint_bank address =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Left",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "1" ],
                        [ "String", "|}
    ^ address
    ^ {|" ] ] ],
                    [ "Union",
                      [ "Left",
                        [ "Union",
                          [ "Left", [ "Union", [ "Left", [ "Unit" ] ] ] ] ] ] ] ] ] ] ] ] ]  },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_invoke_mint_temple address =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Left",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "1" ],
                        [ "String", "|}
    ^ address
    ^ {|" ] ] ],
                    [ "Union",
                      [ "Right",
                        [ "Union",
                          [ "Right", [ "Union", [ "Right", [ "Unit" ] ] ] ] ] ] ] ] ] ] ] ] ]  },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_invoke_eat address amount =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Left",
            [ "Union",
              [ "Right",
                [ "Pair",
                  [ [ "Int", "|}
    ^ amount ^ {|" ],
                    [ "String", "|} ^ address
    ^ {|" ] ] ] ] ] ] ]  },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_invoke_transfer address amount recipient =
  let str =
    {|  { "operation":
    { "address": "DK1NmndDdhkWdWpX7NMArqEjjnWR3xLfM4Kf",
      "argument":
        [ "Union",
          [ "Right",
            [ "Union",
              [ "Right",
                [ "Pair",
                  [ [ "Pair",
                      [ [ "Int", "|}
    ^ amount ^ {|" ],
                        [ "String", "|} ^ address
    ^ {|" ] ] ],
                    [ "String", "|} ^ recipient
    ^ {|" ] ] ] ] ] ] ]  },
  "tickets": [] }|}
  in
  extract_operation_payload str

let decookie_originate =
  let str =
    {|
     { "operation":
    { "initial_storage": [ "Map", [] ],
      "module":
        "",
      "constants":
        [ [ 0, [ "Int", "1" ] ], [ 1, [ "Int", "15" ] ],
          [ 2, [ "Int", "100" ] ], [ 3, [ "Int", "1100" ] ],
          [ 4, [ "Int", "12000" ] ], [ 5, [ "Int", "130000" ] ],
          [ 6, [ "Int", "1400000" ] ], [ 7, [ "Int", "20000000" ] ],
          [ 8, [ "Int", "115" ] ], [ 9, [ "String", "DIV by 0" ] ],
          [ 10, [ "Int", "3" ] ], [ 11, [ "Int", "8" ] ],
          [ 12, [ "Int", "47" ] ], [ 13, [ "Int", "260" ] ],
          [ 14, [ "Int", "1400" ] ], [ 15, [ "Int", "7800" ] ] ],
      "entrypoints":
        { "%delegate": [ "Left", "Left" ], "%eat": [ "Left", "Right" ],
          "%mint": [ "Right", "Left" ], "%transfer": [ "Right", "Right" ] } },
  "tickets": [] }
       |}
  in
  let res =
    match Data_encoding.Json.from_string str with
    | Ok json ->
        Data_encoding.Json.destruct Ocaml_wasm_vm.Operation_payload.encoding
          json
    | Error _ -> failwith "ok"
  in
  res.operation

let modifyState rawExpectedState addr recipient =
  let open Ocaml_wasm_vm in
  match rawExpectedState with
  | Value.Map t -> (
      match recipient with
      | None ->
          let v =
            Value.Map.find (Value.String "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw")
              t
          in
          let v =
            Value.Map.add
              (Value.String
                 (Base.String.substr_replace_all ~pattern:"\"" ~with_:""
                    (Data_encoding.Json.to_string
                       (Data_encoding.Json.construct Env.Address.encoding addr))))
              v t
          in
          Value.Map.remove (Value.String "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw")
            v
      | Some recipient ->
          let v =
            Value.Map.find (Value.String "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw")
              t
          in
          let v =
            Value.Map.add
              (Value.String
                 (Base.String.substr_replace_all ~pattern:"\"" ~with_:""
                    (Data_encoding.Json.to_string
                       (Data_encoding.Json.construct Env.Address.encoding
                          recipient))))
              v t
          in
          let t =
            Value.Map.remove
              (Value.String "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw") v
          in
          let v =
            Value.Map.find (Value.String "tz1dMXXyAtNN5mWtbBcF2HLRkhRFVV7dCQoL")
              t
          in
          let v =
            Value.Map.add
              (Value.String
                 (Base.String.substr_replace_all ~pattern:"\"" ~with_:""
                    (Data_encoding.Json.to_string
                       (Data_encoding.Json.construct Env.Address.encoding addr))))
              v t
          in
          Value.Map.remove (Value.String "tz1dMXXyAtNN5mWtbBcF2HLRkhRFVV7dCQoL")
            v)
  | _ -> failwith "unreachable!"

let storage_testable =
  Alcotest.testable Ocaml_wasm_vm.Value.pp (fun a b ->
      Ocaml_wasm_vm.Value.compare a b = 0)

let new_address () =
  let open Deku_crypto in
  let open Deku_ledger in
  let secret = Ed25519.Secret.generate () in
  let secret = Secret.Ed25519 secret in
  let key = Key.of_secret secret in
  let key_hash = Key_hash.of_key key in
  Address.of_key_hash key_hash

let decookie_test =
  let open Alcotest in
  test_case "Originate/Invoke Decookie" `Quick (fun () ->
      let open Ocaml_wasm_vm in
      let addr = new_address () in
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = State.empty;
              ticket_table = Ticket_table.init [];
            }
          ~operation:decookie_originate
      in
      let state = Result.get_ok x in
      let (State_entry.Entry { storage; _ }) =
        State.fetch_contract state.state
          Deku_ledger.(
            Contract_address.of_user_operation_hash
              (Deku_crypto.BLAKE2b.hash "tutturu"))
      in
      (check bool) "Originate decookies contract" true
        (storage = Value.Map Value.Map.empty);
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_delegate (Deku_ledger.Address.to_b58 addr))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "15" ], [ "Int", "0" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1100" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "100" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "0" ], [ "Int", "12000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking Delegation" expectedState storage);

      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies (Deku_ledger.Address.to_b58 addr) "1")
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "1" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "15" ], [ "Int", "0" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1100" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "100" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "0" ], [ "Int", "12000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking Cookie minting" expectedState storage);

      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies
               (Deku_ledger.Address.to_b58 addr)
               "15")
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "16" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "15" ], [ "Int", "0" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1100" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "100" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "0" ], [ "Int", "12000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking 15 Cookies minting" expectedState
         storage);

      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cursor (Deku_ledger.Address.to_b58 addr))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "1" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1100" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "100" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "0" ], [ "Int", "12000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "1" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking Cursor minting" expectedState storage);

      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies (Deku_ledger.Address.to_b58 addr) "1")
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "2" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1100" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "100" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "0" ], [ "Int", "12000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "1" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking Cookie minting after cursor"
         expectedState storage);

      let y =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies
               (Deku_ledger.Address.to_b58 addr)
               "101")
      in
      let state = Result.get_ok y in
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_grandma (Deku_ledger.Address.to_b58 addr))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "3" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1100" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "115" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "1" ], [ "Int", "12000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "4" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking grandma" expectedState storage);

      let y =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies
               (Deku_ledger.Address.to_b58 addr)
               "1101")
      in
      let state = Result.get_ok y in
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_farm (Deku_ledger.Address.to_b58 addr))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "4" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1265" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "115" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "1" ], [ "Int", "12000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "12" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking farm" expectedState storage);

      let y =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies
               (Deku_ledger.Address.to_b58 addr)
               "12001")
      in
      let state = Result.get_ok y in
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_mine (Deku_ledger.Address.to_b58 addr))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "5" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1265" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "115" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "1" ], [ "Int", "13800" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "59" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking mine" expectedState storage);

      let y =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies
               (Deku_ledger.Address.to_b58 addr)
               "130001")
      in
      let state = Result.get_ok y in
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_factory (Deku_ledger.Address.to_b58 addr))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1400000" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "6" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "1" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "149500" ], [ "Int", "1265" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "115" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "1" ], [ "Int", "13800" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "319" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking factory" expectedState storage);

      let y =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies
               (Deku_ledger.Address.to_b58 addr)
               "1400001")
      in
      let state = Result.get_ok y in
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_bank (Deku_ledger.Address.to_b58 addr))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1610000" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "7" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "1" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "149500" ], [ "Int", "1265" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "115" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "1" ], [ "Int", "13800" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "1719" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking bank" expectedState storage);

      let y =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_cookies
               (Deku_ledger.Address.to_b58 addr)
               "20000001")
      in
      let state = Result.get_ok y in
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_mint_temple (Deku_ledger.Address.to_b58 addr))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1610000" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "8" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "0" ], [ "Int", "1" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "149500" ], [ "Int", "1265" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "115" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "1" ], [ "Int", "13800" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "9519" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "23000000" ], [ "Int", "1" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking temple" expectedState storage);

      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:(decookie_invoke_eat (Deku_ledger.Address.to_b58 addr) "7")
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
                 [ "Map",
                  [ [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
                      [ "Pair",
                        [ [ "Pair",
                            [ [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair",
                                        [ [ "Set",
                                            [ [ "String",
                                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
                                          [ "Int", "1610000" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "1" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                                      [ "Pair", [ [ "Int", "7" ], [ "Int", "1" ] ] ] ] ] ] ],
                              [ "Pair",
                                [ [ "Pair",
                                    [ [ "Pair", [ [ "Int", "149500" ], [ "Int", "1265" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "115" ] ] ] ] ],
                                  [ "Pair",
                                    [ [ "Pair", [ [ "Int", "1" ], [ "Int", "13800" ] ] ],
                                      [ "Pair", [ [ "Int", "1" ], [ "Int", "9519" ] ] ] ] ] ] ] ] ],
                          [ "Pair", [ [ "Int", "23000000" ], [ "Int", "1" ] ] ] ] ] ] ] ]
               |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr None in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking eat" expectedState storage);

      let recipient = new_address () in
      let y =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = recipient;
              sender = recipient;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_delegate (Deku_ledger.Address.to_b58 recipient))
      in
      let state = Result.get_ok y in
      let x =
        Env.execute
          ~operation_hash:(Deku_crypto.BLAKE2b.hash "tutturu")
          ~tickets:[]
          Env.
            {
              source = addr;
              sender = addr;
              ledger = Deku_ledger.Ledger.initial;
              state = state.state;
              ticket_table = Ticket_table.init [];
            }
          ~operation:
            (decookie_invoke_transfer
               (Deku_ledger.Address.to_b58 addr)
               "1"
               (Deku_ledger.Address.to_b58 recipient))
      in
      let state = Result.get_ok x in
      (let (State_entry.Entry { storage; _ }) =
         State.fetch_contract state.state
           Deku_ledger.(
             Contract_address.of_user_operation_hash
               (Deku_crypto.BLAKE2b.hash "tutturu"))
       in
       let json =
         Data_encoding.Json.from_string
           ({|
              [ "Map",
  [ [ [ "String", "tz1dMXXyAtNN5mWtbBcF2HLRkhRFVV7dCQoL" ],
      [ "Pair",
        [ [ "Pair",
            [ [ "Pair",
                [ [ "Pair",
                    [ [ "Pair",
                        [ [ "Set",
                            [ [ "String",
                                "|}
           ^ Deku_ledger.Address.to_b58 addr
           ^ {|" ] ] ],
           [ "Int", "1610000" ] ] ],
                      [ "Pair", [ [ "Int", "1" ], [ "Int", "0" ] ] ] ] ],
                  [ "Pair",
                    [ [ "Pair", [ [ "Int", "17" ], [ "Int", "1" ] ] ],
                      [ "Pair", [ [ "Int", "7" ], [ "Int", "1" ] ] ] ] ] ] ],
              [ "Pair",
                [ [ "Pair",
                    [ [ "Pair", [ [ "Int", "149500" ], [ "Int", "1265" ] ] ],
                      [ "Pair", [ [ "Int", "1" ], [ "Int", "115" ] ] ] ] ],
                  [ "Pair",
                    [ [ "Pair", [ [ "Int", "1" ], [ "Int", "13800" ] ] ],
                      [ "Pair", [ [ "Int", "1" ], [ "Int", "9519" ] ] ] ] ] ] ] ] ],
          [ "Pair", [ [ "Int", "23000000" ], [ "Int", "1" ] ] ] ] ] ],
                          
    [ [ "String", "tz1QzQLQcoCfjjcHR5w9bCEXLyQMtYhmFLzw" ],
      [ "Pair",
        [ [ "Pair",
            [ [ "Pair",
                [ [ "Pair",
                    [ [ "Pair",
                        [ [ "Set",
                            [ [ "String",
                                "|}
           ^ Deku_ledger.Address.to_b58 recipient
           ^ {|" ] ] ],[ "Int", "1400000" ] ] ],
                      [ "Pair", [ [ "Int", "0" ], [ "Int", "1" ] ] ] ] ],
                  [ "Pair",
                    [ [ "Pair", [ [ "Int", "15" ], [ "Int", "0" ] ] ],
                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ],
              [ "Pair",
                [ [ "Pair",
                    [ [ "Pair", [ [ "Int", "130000" ], [ "Int", "1100" ] ] ],
                      [ "Pair", [ [ "Int", "0" ], [ "Int", "100" ] ] ] ] ],
                  [ "Pair",
                    [ [ "Pair", [ [ "Int", "0" ], [ "Int", "12000" ] ] ],
                      [ "Pair", [ [ "Int", "0" ], [ "Int", "0" ] ] ] ] ] ] ] ] ],
          [ "Pair", [ [ "Int", "20000000" ], [ "Int", "0" ] ] ] ] ] ] ] ]
              |}
           )
       in
       let json = Result.get_ok json in
       let rawExpectedState = Data_encoding.Json.destruct Value.encoding json in
       let modifiedState = modifyState rawExpectedState addr (Some recipient) in
       let expectedState = Value.Map modifiedState in
       (check storage_testable) "Invoking transfer" expectedState storage);
      ())
