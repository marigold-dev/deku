"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[563],{35318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=i,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},55977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(25773),i=(n(27378),n(35318));const r={sidebar_position:3},o="Deku CLI",l={unversionedId:"Deku-Canonical/deku_c_cli",id:"Deku-Canonical/deku_c_cli",title:"Deku CLI",description:"We provide a small CLI client in TypeScript to access Deku-C. This client allows you to originate",source:"@site/../docs/Deku-Canonical/deku_c_cli.md",sourceDirName:"Deku-Canonical",slug:"/Deku-Canonical/deku_c_cli",permalink:"/docs/Deku-Canonical/deku_c_cli",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/../docs/Deku-Canonical/deku_c_cli.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Quick-start with Deku-C",permalink:"/docs/Deku-Canonical/dekuc_quickstart"},next:{title:"Deku Parametric",permalink:"/docs/category/deku-parametric"}},c={},s=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Generating an identity",id:"generating-an-identity",level:3},{value:"Originating a contract",id:"originating-a-contract",level:3},{value:"Inspecting a smart contract",id:"inspecting-a-smart-contract",level:3},{value:"Calling a smart contract",id:"calling-a-smart-contract",level:3}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"deku-cli"},"Deku CLI"),(0,i.kt)("p",null,"We provide a small CLI client in TypeScript to access Deku-C. This client allows you to originate\nnew smart contracts, inspect their state or send transactions to call their entrypoints."),(0,i.kt)("p",null,"To use the client, first install it with ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install -g @marigold-dev/deku-cli"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The Deku CLI requires the ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," API and thus only works with NodeJS version 18 and above")),(0,i.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,i.kt)("h3",{id:"generating-an-identity"},"Generating an identity"),(0,i.kt)("p",null,"In order to originate contracts or post transactions, you first need a wallet with an address and\nthe associated private key. You can either take an existing Ed25519 private key (associated with a\ntz1 address) or generate a new one with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli generate-identity -o wallet.json\n")),(0,i.kt)("p",null,"This will create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"wallet.json"),", containing something like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "address": "tz1Vhy8BWXdQNm6wNFi36hWj4iSoGqBrMB4v",\n  "priv_key": "edsk4J5PQ8UZ2HrtvnDeRuL8uA1y8isPBrRDkPRkPvTn6SQYMGJ3WV"\n}\n')),(0,i.kt)("h3",{id:"originating-a-contract"},"Originating a contract"),(0,i.kt)("p",null,"Deku-C uses a WASM virtual machine, for which you can target with a variety of languages. In particular, you can\nuse contracts written or compiled to the Michelson language, which are compiled on-the-fly towards\nWASM using the ",(0,i.kt)("inlineCode",{parentName:"p"},"originate")," command. Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli originate wallet.json contract.tz initial_expression\n")),(0,i.kt)("p",null,"where"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wallet.json")," is the path to a wallet file;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contract.tz")," is the path to a contract file, in Michelson;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initial_expression")," is the initial state of the storage at origination, in Michelson.")),(0,i.kt)("p",null,"The command provides the hash of the origination operation as well as the address of the contract.\nFor instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ deku-cli originate wallet.json contract.tz 'Pair 0 None'\n\noperation hash: Do2T2AEN5YheH8YpNgx1ysaU1XP8MmWborfFk5EkszXBCk67fzWA\nContract originated at address DK1CeFk3tNkRNvCM2hSwCxV5kCUEy2gKzC73\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The contract address is printed even if the origination fails. Unlike the ",(0,i.kt)("inlineCode",{parentName:"p"},"tezos-client")," tool,\n",(0,i.kt)("inlineCode",{parentName:"p"},"deku-cli")," does not check that the origination was successful, nor does it wait for the operation's inclusion.")),(0,i.kt)("p",null,"Alternatively, you can deploy a smart contract written in Ligo directly. To compile the contract,\nthe CLI will call another API hosted by Marigold and upload your contract, then call the Deku-C with\nthe resulting Michelson code. For the moment, the initial storage expression still has to be written\nin Michelson, and the contract is limited to one file."),(0,i.kt)("h3",{id:"inspecting-a-smart-contract"},"Inspecting a smart contract"),(0,i.kt)("p",null,"The CLI provides two commands to inspect a smart contract from its address. First, you can list its entrypoints\nusing the ",(0,i.kt)("inlineCode",{parentName:"p"},"show-entrypoints")," command. By default, they are listed by their name; however, to call\nthose entrypoints (which we show in the next section) it can be easier to print the corresponding\nMichelson expression as well. For this, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--verbose")," flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ deku-cli show-entrypoints --verbose DK1Goyabut31X3kbZNW1i4qHKoX9sdMF8JhL\n{\n  '%decrement': [ 'Left', 'Left' ],\n  '%increment': [ 'Left', 'Right' ],\n  '%reset': [ 'Right' ]\n}\n")),(0,i.kt)("p",null,"The storage of a smart contract can be inspected with the ",(0,i.kt)("inlineCode",{parentName:"p"},"show-storage")," command. This will print a\nJSON expression representing the current state of the contract."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The printed storage expression show the internal state of the VM for the contract. In general, it is\nnot valid Michelson or Ligo code.")),(0,i.kt)("p",null,"More information can be printed using the ",(0,i.kt)("inlineCode",{parentName:"p"},"show-storage --raw")," option, including the originator of\nthe contract and the raw code of the contract."),(0,i.kt)("h3",{id:"calling-a-smart-contract"},"Calling a smart contract"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"invoke")," command allows to call an entrypoint with a specific parameter. Usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli invoke wallet contract_address parameter\n")),(0,i.kt)("p",null,"where"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wallet")," is a path towards a wallet file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contract_address")," is the address of the smart contract on the Deku-C chain"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parameter")," is the Michelson expression of the entrypoint and its argument")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"parameter")," can be provided by the Ligo compiler using the ",(0,i.kt)("inlineCode",{parentName:"p"},"ligo compile parameter")," command."),(0,i.kt)("p",null,"To invoke a contract with a Ligo expression directly, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"invoke-ligo")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"deku-cli invoke wallet contract_address contract_path expression\n")),(0,i.kt)("p",null,"where"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contract_path")," is the path towards the contract source code, which is required to compile the\nexpression"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expression")," is the Ligo expression to compile")))}d.isMDXComponent=!0}}]);